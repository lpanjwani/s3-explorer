//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../index.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../index.types';
import { getAxios, getBaseUrl } from './helpers';

export function listBuckets(
	config?: AxiosRequestConfig | undefined
): Promise<Types.ListBucketDto[]> {
	let url_ = getBaseUrl() + '/buckets';
	url_ = url_.replace(/[?&]$/, '');

	let options_: AxiosRequestConfig = {
		..._requestConfigListBuckets,
		...config,
		method: 'GET',
		url: url_,
		headers: {
			..._requestConfigListBuckets?.headers,
			Accept: 'application/json'
		}
	};

	return getAxios()
		.request(options_)
		.catch((_error: any) => {
			if (isAxiosError(_error) && _error.response) {
				return _error.response;
			} else {
				throw _error;
			}
		})
		.then((_response: AxiosResponse) => {
			return processListBuckets(_response);
		});
}

function processListBuckets(response: AxiosResponse): Promise<Types.ListBucketDto[]> {
	const status = response.status;
	let _headers: any = {};
	if (response.headers && typeof response.headers === 'object') {
		for (let k in response.headers) {
			if (response.headers.hasOwnProperty(k)) {
				_headers[k] = response.headers[k];
			}
		}
	}
	if (status === 200) {
		const _responseText = response.data;
		let result200: any = null;
		let resultData200 = _responseText;
		if (Array.isArray(resultData200)) {
			result200 = resultData200.map(item => Types.initListBucketDto(item));
		}
		return Promise.resolve<Types.ListBucketDto[]>(result200);
	} else if (status !== 200 && status !== 204) {
		const _responseText = response.data;
		return throwException(
			'An unexpected server error occurred.',
			status,
			_responseText,
			_headers
		);
	}
	return Promise.resolve<Types.ListBucketDto[]>(null as any);
}

export function listObjects(
	bucketName: string,
	config?: AxiosRequestConfig | undefined
): Promise<Types.ListObjectDto[]> {
	let url_ = getBaseUrl() + '/buckets/{bucketName}/objects';
	if (bucketName === undefined || bucketName === null)
		throw new Error("The parameter 'bucketName' must be defined.");
	url_ = url_.replace('{bucketName}', encodeURIComponent('' + bucketName));
	url_ = url_.replace(/[?&]$/, '');

	let options_: AxiosRequestConfig = {
		..._requestConfigListObjects,
		...config,
		method: 'GET',
		url: url_,
		headers: {
			..._requestConfigListObjects?.headers,
			Accept: 'application/json'
		}
	};

	return getAxios()
		.request(options_)
		.catch((_error: any) => {
			if (isAxiosError(_error) && _error.response) {
				return _error.response;
			} else {
				throw _error;
			}
		})
		.then((_response: AxiosResponse) => {
			return processListObjects(_response);
		});
}

function processListObjects(response: AxiosResponse): Promise<Types.ListObjectDto[]> {
	const status = response.status;
	let _headers: any = {};
	if (response.headers && typeof response.headers === 'object') {
		for (let k in response.headers) {
			if (response.headers.hasOwnProperty(k)) {
				_headers[k] = response.headers[k];
			}
		}
	}
	if (status === 200) {
		const _responseText = response.data;
		let result200: any = null;
		let resultData200 = _responseText;
		if (Array.isArray(resultData200)) {
			result200 = resultData200.map(item => Types.initListObjectDto(item));
		}
		return Promise.resolve<Types.ListObjectDto[]>(result200);
	} else if (status !== 200 && status !== 204) {
		const _responseText = response.data;
		return throwException(
			'An unexpected server error occurred.',
			status,
			_responseText,
			_headers
		);
	}
	return Promise.resolve<Types.ListObjectDto[]>(null as any);
}

export function getObjectPresignedDownloadUrl(
	bucketName: string,
	objectKey: string,
	config?: AxiosRequestConfig | undefined
): Promise<string> {
	let url_ = getBaseUrl() + '/buckets/{bucketName}/objects/{objectKey}/download';
	if (bucketName === undefined || bucketName === null)
		throw new Error("The parameter 'bucketName' must be defined.");
	url_ = url_.replace('{bucketName}', encodeURIComponent('' + bucketName));
	if (objectKey === undefined || objectKey === null)
		throw new Error("The parameter 'objectKey' must be defined.");
	url_ = url_.replace('{objectKey}', encodeURIComponent('' + objectKey));
	url_ = url_.replace(/[?&]$/, '');

	let options_: AxiosRequestConfig = {
		..._requestConfigGetObjectPresignedDownloadUrl,
		...config,
		method: 'GET',
		url: url_,
		headers: {
			..._requestConfigGetObjectPresignedDownloadUrl?.headers,
			Accept: 'application/json'
		}
	};

	return getAxios()
		.request(options_)
		.catch((_error: any) => {
			if (isAxiosError(_error) && _error.response) {
				return _error.response;
			} else {
				throw _error;
			}
		})
		.then((_response: AxiosResponse) => {
			return processGetObjectPresignedDownloadUrl(_response);
		});
}

function processGetObjectPresignedDownloadUrl(response: AxiosResponse): Promise<string> {
	const status = response.status;
	let _headers: any = {};
	if (response.headers && typeof response.headers === 'object') {
		for (let k in response.headers) {
			if (response.headers.hasOwnProperty(k)) {
				_headers[k] = response.headers[k];
			}
		}
	}
	if (status === 200) {
		const _responseText = response.data;
		let result200: any = null;
		let resultData200 = _responseText;

		result200 = resultData200;

		return Promise.resolve<string>(result200);
	} else if (status !== 200 && status !== 204) {
		const _responseText = response.data;
		return throwException(
			'An unexpected server error occurred.',
			status,
			_responseText,
			_headers
		);
	}
	return Promise.resolve<string>(null as any);
}
let _requestConfigListBuckets: Partial<AxiosRequestConfig> | null;
export function getListBucketsRequestConfig() {
	return _requestConfigListBuckets;
}
export function setListBucketsRequestConfig(value: Partial<AxiosRequestConfig>) {
	_requestConfigListBuckets = value;
}
export function patchListBucketsRequestConfig(
	patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>
) {
	_requestConfigListBuckets = patch(_requestConfigListBuckets ?? {});
}

let _requestConfigListObjects: Partial<AxiosRequestConfig> | null;
export function getListObjectsRequestConfig() {
	return _requestConfigListObjects;
}
export function setListObjectsRequestConfig(value: Partial<AxiosRequestConfig>) {
	_requestConfigListObjects = value;
}
export function patchListObjectsRequestConfig(
	patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>
) {
	_requestConfigListObjects = patch(_requestConfigListObjects ?? {});
}

let _requestConfigGetObjectPresignedDownloadUrl: Partial<AxiosRequestConfig> | null;
export function getGetObjectPresignedDownloadUrlRequestConfig() {
	return _requestConfigGetObjectPresignedDownloadUrl;
}
export function setGetObjectPresignedDownloadUrlRequestConfig(value: Partial<AxiosRequestConfig>) {
	_requestConfigGetObjectPresignedDownloadUrl = value;
}
export function patchGetObjectPresignedDownloadUrlRequestConfig(
	patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>
) {
	_requestConfigGetObjectPresignedDownloadUrl = patch(
		_requestConfigGetObjectPresignedDownloadUrl ?? {}
	);
}
