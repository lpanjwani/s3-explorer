//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../index.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
	UseQueryResult,
	QueryFunctionContext,
	UseQueryOptions,
	QueryClient,
	QueryKey,
	MutationKey,
	UseMutationOptions,
	UseMutationResult,
	QueryMeta,
	MutationMeta
} from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './S3ControllerClient';
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type ListObjectsS3ControllerQueryParameters = {
	bucketName: string;
};

export type GetObjectPresignedDownloadUrlS3ControllerQueryParameters = {
	bucketName: string;
	objectKey: string;
};

export function listBucketsUrl(): string {
	let url_ = getBaseUrl() + '/buckets';
	url_ = url_.replace(/[?&]$/, '');
	return url_;
}

let listBucketsDefaultOptions: Omit<
	UseQueryOptions<Types.ListBucketDto[], unknown, Types.ListBucketDto[]>,
	'queryKey'
> = {
	queryFn: __listBuckets
};
export function getListBucketsDefaultOptions() {
	return listBucketsDefaultOptions;
}
export function setListBucketsDefaultOptions(options: typeof listBucketsDefaultOptions) {
	listBucketsDefaultOptions = options;
}

export function listBucketsQueryKey(): QueryKey;
export function listBucketsQueryKey(...params: any[]): QueryKey {
	return trimArrayEnd(['S3ControllerClient', 'listBuckets']);
}
function __listBuckets(
	context: QueryFunctionContext,
	axiosConfig?: AxiosRequestConfig | undefined
) {
	return Client.listBuckets(axiosConfig);
}

export function useListBucketsQuery<TSelectData = Types.ListBucketDto[], TError = unknown>(
	options?: Omit<UseQueryOptions<Types.ListBucketDto[], TError, TSelectData>, 'queryKey'>,
	axiosConfig?: Partial<AxiosRequestConfig>
): UseQueryResult<TSelectData, TError>;
export function useListBucketsQuery<TSelectData = Types.ListBucketDto[], TError = unknown>(
	...params: any[]
): UseQueryResult<TSelectData, TError> {
	let options: UseQueryOptions<Types.ListBucketDto[], TError, TSelectData> | undefined =
		undefined;
	let axiosConfig: AxiosRequestConfig | undefined = undefined;

	options = params[0] as any;
	axiosConfig = params[1] as any;

	const metaContext = useContext(QueryMetaContext);
	options = addMetaToOptions(options, metaContext);

	return useQuery<Types.ListBucketDto[], TError, TSelectData>({
		queryFn: axiosConfig ? context => __listBuckets(context, axiosConfig) : __listBuckets,
		queryKey: listBucketsQueryKey(),
		...(listBucketsDefaultOptions as unknown as Omit<
			UseQueryOptions<Types.ListBucketDto[], TError, TSelectData>,
			'queryKey'
		>),
		...options
	});
}

export function setListBucketsData(
	queryClient: QueryClient,
	updater: (data: Types.ListBucketDto[] | undefined) => Types.ListBucketDto[]
) {
	queryClient.setQueryData(listBucketsQueryKey(), updater);
}

export function setListBucketsDataByQueryId(
	queryClient: QueryClient,
	queryKey: QueryKey,
	updater: (data: Types.ListBucketDto[] | undefined) => Types.ListBucketDto[]
) {
	queryClient.setQueryData(queryKey, updater);
}

export function listObjectsUrl(bucketName: string): string {
	let url_ = getBaseUrl() + '/buckets/{bucketName}/objects';
	if (bucketName === undefined || bucketName === null)
		throw new Error("The parameter 'bucketName' must be defined.");
	url_ = url_.replace('{bucketName}', encodeURIComponent('' + bucketName));
	url_ = url_.replace(/[?&]$/, '');
	return url_;
}

let listObjectsDefaultOptions: Omit<
	UseQueryOptions<Types.ListObjectDto[], unknown, Types.ListObjectDto[]>,
	'queryKey'
> = {
	queryFn: __listObjects
};
export function getListObjectsDefaultOptions() {
	return listObjectsDefaultOptions;
}
export function setListObjectsDefaultOptions(options: typeof listObjectsDefaultOptions) {
	listObjectsDefaultOptions = options;
}

export function listObjectsQueryKey(bucketName: string): QueryKey;
export function listObjectsQueryKey(...params: any[]): QueryKey {
	if (params.length === 1 && isParameterObject(params[0])) {
		const { bucketName } = params[0] as ListObjectsS3ControllerQueryParameters;

		return trimArrayEnd(['S3ControllerClient', 'listObjects', bucketName as any]);
	} else {
		return trimArrayEnd(['S3ControllerClient', 'listObjects', ...params]);
	}
}
function __listObjects(
	context: QueryFunctionContext,
	axiosConfig?: AxiosRequestConfig | undefined
) {
	return Client.listObjects(context.queryKey[2] as string, axiosConfig);
}

export function useListObjectsQuery<TSelectData = Types.ListObjectDto[], TError = unknown>(
	dto: ListObjectsS3ControllerQueryParameters,
	options?: Omit<UseQueryOptions<Types.ListObjectDto[], TError, TSelectData>, 'queryKey'>,
	axiosConfig?: Partial<AxiosRequestConfig>
): UseQueryResult<TSelectData, TError>;

export function useListObjectsQuery<TSelectData = Types.ListObjectDto[], TError = unknown>(
	bucketName: string,
	options?: Omit<UseQueryOptions<Types.ListObjectDto[], TError, TSelectData>, 'queryKey'>,
	axiosConfig?: Partial<AxiosRequestConfig>
): UseQueryResult<TSelectData, TError>;
export function useListObjectsQuery<TSelectData = Types.ListObjectDto[], TError = unknown>(
	...params: any[]
): UseQueryResult<TSelectData, TError> {
	let options: UseQueryOptions<Types.ListObjectDto[], TError, TSelectData> | undefined =
		undefined;
	let axiosConfig: AxiosRequestConfig | undefined = undefined;
	let bucketName: any = undefined;

	if (params.length > 0) {
		if (isParameterObject(params[0])) {
			({ bucketName } = params[0] as ListObjectsS3ControllerQueryParameters);
			options = params[1];
			axiosConfig = params[2];
		} else {
			[bucketName, options, axiosConfig] = params;
		}
	}

	const metaContext = useContext(QueryMetaContext);
	options = addMetaToOptions(options, metaContext);

	return useQuery<Types.ListObjectDto[], TError, TSelectData>({
		queryFn: axiosConfig ? context => __listObjects(context, axiosConfig) : __listObjects,
		queryKey: listObjectsQueryKey(bucketName),
		...(listObjectsDefaultOptions as unknown as Omit<
			UseQueryOptions<Types.ListObjectDto[], TError, TSelectData>,
			'queryKey'
		>),
		...options
	});
}

export function setListObjectsData(
	queryClient: QueryClient,
	updater: (data: Types.ListObjectDto[] | undefined) => Types.ListObjectDto[],
	bucketName: string
) {
	queryClient.setQueryData(listObjectsQueryKey(bucketName), updater);
}

export function setListObjectsDataByQueryId(
	queryClient: QueryClient,
	queryKey: QueryKey,
	updater: (data: Types.ListObjectDto[] | undefined) => Types.ListObjectDto[]
) {
	queryClient.setQueryData(queryKey, updater);
}

export function getObjectPresignedDownloadUrlUrl(bucketName: string, objectKey: string): string {
	let url_ = getBaseUrl() + '/buckets/{bucketName}/objects/{objectKey}/download';
	if (bucketName === undefined || bucketName === null)
		throw new Error("The parameter 'bucketName' must be defined.");
	url_ = url_.replace('{bucketName}', encodeURIComponent('' + bucketName));
	if (objectKey === undefined || objectKey === null)
		throw new Error("The parameter 'objectKey' must be defined.");
	url_ = url_.replace('{objectKey}', encodeURIComponent('' + objectKey));
	url_ = url_.replace(/[?&]$/, '');
	return url_;
}

let getObjectPresignedDownloadUrlDefaultOptions: Omit<
	UseQueryOptions<string, unknown, string>,
	'queryKey'
> = {
	queryFn: __getObjectPresignedDownloadUrl
};
export function getGetObjectPresignedDownloadUrlDefaultOptions() {
	return getObjectPresignedDownloadUrlDefaultOptions;
}
export function setGetObjectPresignedDownloadUrlDefaultOptions(
	options: typeof getObjectPresignedDownloadUrlDefaultOptions
) {
	getObjectPresignedDownloadUrlDefaultOptions = options;
}

export function getObjectPresignedDownloadUrlQueryKey(
	dto: GetObjectPresignedDownloadUrlS3ControllerQueryParameters
): QueryKey;
export function getObjectPresignedDownloadUrlQueryKey(
	bucketName: string,
	objectKey: string
): QueryKey;
export function getObjectPresignedDownloadUrlQueryKey(...params: any[]): QueryKey {
	if (params.length === 1 && isParameterObject(params[0])) {
		const { bucketName, objectKey } =
			params[0] as GetObjectPresignedDownloadUrlS3ControllerQueryParameters;

		return trimArrayEnd([
			'S3ControllerClient',
			'getObjectPresignedDownloadUrl',
			bucketName as any,
			objectKey as any
		]);
	} else {
		return trimArrayEnd(['S3ControllerClient', 'getObjectPresignedDownloadUrl', ...params]);
	}
}
function __getObjectPresignedDownloadUrl(
	context: QueryFunctionContext,
	axiosConfig?: AxiosRequestConfig | undefined
) {
	return Client.getObjectPresignedDownloadUrl(
		context.queryKey[2] as string,
		context.queryKey[3] as string,
		axiosConfig
	);
}

export function useGetObjectPresignedDownloadUrlQuery<TSelectData = string, TError = unknown>(
	dto: GetObjectPresignedDownloadUrlS3ControllerQueryParameters,
	options?: Omit<UseQueryOptions<string, TError, TSelectData>, 'queryKey'>,
	axiosConfig?: Partial<AxiosRequestConfig>
): UseQueryResult<TSelectData, TError>;

export function useGetObjectPresignedDownloadUrlQuery<TSelectData = string, TError = unknown>(
	bucketName: string,
	objectKey: string,
	options?: Omit<UseQueryOptions<string, TError, TSelectData>, 'queryKey'>,
	axiosConfig?: Partial<AxiosRequestConfig>
): UseQueryResult<TSelectData, TError>;
export function useGetObjectPresignedDownloadUrlQuery<TSelectData = string, TError = unknown>(
	...params: any[]
): UseQueryResult<TSelectData, TError> {
	let options: UseQueryOptions<string, TError, TSelectData> | undefined = undefined;
	let axiosConfig: AxiosRequestConfig | undefined = undefined;
	let bucketName: any = undefined;
	let objectKey: any = undefined;

	if (params.length > 0) {
		if (isParameterObject(params[0])) {
			({ bucketName, objectKey } =
				params[0] as GetObjectPresignedDownloadUrlS3ControllerQueryParameters);
			options = params[1];
			axiosConfig = params[2];
		} else {
			[bucketName, objectKey, options, axiosConfig] = params;
		}
	}

	const metaContext = useContext(QueryMetaContext);
	options = addMetaToOptions(options, metaContext);

	return useQuery<string, TError, TSelectData>({
		queryFn: axiosConfig
			? context => __getObjectPresignedDownloadUrl(context, axiosConfig)
			: __getObjectPresignedDownloadUrl,
		queryKey: getObjectPresignedDownloadUrlQueryKey(bucketName, objectKey),
		...(getObjectPresignedDownloadUrlDefaultOptions as unknown as Omit<
			UseQueryOptions<string, TError, TSelectData>,
			'queryKey'
		>),
		...options
	});
}

export function setGetObjectPresignedDownloadUrlData(
	queryClient: QueryClient,
	updater: (data: string | undefined) => string,
	bucketName: string,
	objectKey: string
) {
	queryClient.setQueryData(getObjectPresignedDownloadUrlQueryKey(bucketName, objectKey), updater);
}

export function setGetObjectPresignedDownloadUrlDataByQueryId(
	queryClient: QueryClient,
	queryKey: QueryKey,
	updater: (data: string | undefined) => string
) {
	queryClient.setQueryData(queryKey, updater);
}
